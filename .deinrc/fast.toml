[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap :tree :NERDTreeToggle
  nnoremap <silent><C-e> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
hook_add = '''
  let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add = '''
  " 全体置換
  nnoremap <silent> <Space>o :OverCommandLine<CR>%s//g<Left><Left>
  " 選択範囲置換
  vnoremap <silent> <Space>o :OverCommandLine<CR>s//g<Left><Left>
  " カーソル下の単語置換
  nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
'''

[[plugins]]
repo = 'terryma/vim-multiple-cursors'
hook_add = '''
  " Called once right before you start selecting multiple cursors
  function! Multiple_cursors_before()
    if exists(':NeoCompleteLock')==2
      exe 'NeoCompleteLock'
    endif
  endfunction

  " Called once only when the multiple selection is canceled (default <Esc>)
  function! Multiple_cursors_after()
    if exists(':NeoCompleteUnlock')==2
      exe 'NeoCompleteUnlock'
    endif
  endfunction
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'justincampbell/vim-eighties'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config = {'*': {'hook/time/enable': '1'},}
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'Shougo/vimshell.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# カーソル移動
[[plugins]]
repo = 'Lokaltog/vim-easymotion'
hook_add = '''
  " デフォルトのキーマッピングを無効に
  let g:EasyMotion_do_mapping = 0
  " f + 2文字 で画面全体を検索してジャンプ
  nmap f <plug>(easymotion-overwin-f2)
  " 検索時、大文字小文字を区別しない
  let g:EasyMotion_smartcase = 1
'''

# カーソル位置のコンテキストに合わせてftを切り替える
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

# カーソル位置のコンテキストのftを判定するライブラリ
[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'

[[plugins]]
repo = 'ervandew/supertab'
hook_add = '''
  let g:SuperTabDefaultCompletionType = "<c-n>"
'''

# comment out/in
[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
  vmap - <Plug>(caw:I:toggle)
'''

# pug syntax
[[plugins]]
repo = 'digitaltoad/vim-pug'
on_ft = ['pug']

# html5 syntax
[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html']

# stylus syntax
[[plugins]]
repo = 'wavded/vim-stylus'
on_ft = ['styl']

# scss color syntax
[[plugins]]
repo = 'cakebaker/scss-syntax.vim'
on_ft = ['sass']

# css syntax
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css']

# css color syntax
[[plugins]]
repo = 'ap/vim-css-color'

# json syntax
[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']

# toml syntax
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

# vue syntax
[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']

# es6 syntax
[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['js']

# stg-0 syntax
[[plugins]]
repo = 'othree/es.next.syntax.vim'
on_ft = ['js']

# php syntax
[[plugins]]
repo = 'StanAngeloff/php.vim'
on_ft = ['php']

 # カラースキーマ
[[plugins]]
repo = 'Pychimp/vim-luna'
hook_add = '''
  set background=dark
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  au MyAutoCmd VimEnter * nested colorscheme luna
'''

# statusline custom
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
  \   'active': {
  \     'left': [['mode', 'paste'], ['gitbranch', 'readonly', 'filename', 'modified']],
  \     'right': [['lineinfo'], ['percent'], ['fileformat', 'fileencoding', 'filetype']]
  \   },
  \   'inactive': {
  \     'left': [['filename']],
  \     'right': [['lineinfo'], ['percent']]
  \   },
  \   'component_function': {
  \     'gitbranch': 'fugitive#head'
  \   }
  \ }
'''

# linter, hint
[[plugins]]
repo = 'w0rp/ale'
depends = ['lightline.vim']

# lightline ale
[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['lightline.vim']
hook_add = '''
  let g:lightline.component_expand = {
  \   'linter_warnings': 'lightline#ale#warnings',
  \   'linter_errors': 'lightline#ale#errors',
  \   'linter_ok': 'lightline#ale#ok'
  \ }
  let g:lightline.component_type = {
  \   'linter_warnings': 'warning',
  \   'linter_errors': 'error',
  \   'linter_ok': 'left'
  \ }
  let g:lightline.active.right = [['lineinfo'], ['percent'], ['fileformat', 'fileencoding', 'filetype'], ['linter_errors', 'linter_warnings', 'linter_ok']]
'''

