[[plugins]]
repo = 'Shougo/dein.vim'

# DeinUpdate
[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

## [[plugins]]
## repo = 'Shougo/defx.nvim'
## hook_post_source = '''
##   autocmd FileType defx call s:defx_my_settings()
##
##   function! s:defx_my_settings() abort
##     nnoremap <silent><buffer><expr> <CR>
##      \ defx#do_action('drop')
##     nnoremap <silent><buffer><expr> c
##     \ defx#do_action('copy')
##     nnoremap <silent><buffer><expr> m
##     \ defx#do_action('move')
##     nnoremap <silent><buffer><expr> p
##     \ defx#do_action('paste')
##     nnoremap <silent><buffer><expr> l
##     \ defx#do_action('drop')
##     nnoremap <silent><buffer><expr> t
##     \ defx#do_action('open','tabnew')
##     nnoremap <silent><buffer><expr> E
##     \ defx#do_action('drop', 'vsplit')
##     nnoremap <silent><buffer><expr> P
##     \ defx#do_action('drop', 'pedit')
##     nnoremap <silent><buffer><expr> o
##     \ defx#do_action('open_or_close_tree')
##     nnoremap <silent><buffer><expr> K
##     \ defx#do_action('new_directory')
##     nnoremap <silent><buffer><expr> N
##     \ defx#do_action('new_file')
##     nnoremap <silent><buffer><expr> M
##     \ defx#do_action('new_multiple_files')
##     nnoremap <silent><buffer><expr> C
##     \ defx#do_action('toggle_columns',
##     \                'mark:indent:icon:filename:type:size:time')
##     nnoremap <silent><buffer><expr> S
##     \ defx#do_action('toggle_sort', 'time')
##     nnoremap <silent><buffer><expr> d
##     \ defx#do_action('remove')
##     nnoremap <silent><buffer><expr> r
##     \ defx#do_action('rename')
##     nnoremap <silent><buffer><expr> !
##     \ defx#do_action('execute_command')
##     nnoremap <silent><buffer><expr> x
##     \ defx#do_action('execute_system')
##     nnoremap <silent><buffer><expr> yy
##     \ defx#do_action('yank_path')
##     nnoremap <silent><buffer><expr> .
##     \ defx#do_action('toggle_ignored_files')
##     nnoremap <silent><buffer><expr> ;
##     \ defx#do_action('repeat')
##     nnoremap <silent><buffer><expr> h
##     \ defx#do_action('cd', ['..'])
##     nnoremap <silent><buffer><expr> ~
##     \ defx#do_action('cd')
##     nnoremap <silent><buffer><expr> q
##     \ defx#do_action('quit')
##     nnoremap <silent><buffer><expr> <Space>
##     \ defx#do_action('toggle_select') . 'j'
##     nnoremap <silent><buffer><expr> *
##     \ defx#do_action('toggle_select_all')
##     nnoremap <silent><buffer><expr> j
##     \ line('.') == line('$') ? 'gg' : 'j'
##     nnoremap <silent><buffer><expr> k
##     \ line('.') == 1 ? 'G' : 'k'
##     nnoremap <silent><buffer><expr> <C-l>
##     \ defx#do_action('redraw')
##     nnoremap <silent><buffer><expr> <C-g>
##     \ defx#do_action('print')
##     nnoremap <silent><buffer><expr> cd
##     \ defx#do_action('change_vim_cwd')
##   endfunction
## '''

# deoplete on vim requires plugin 1/2
[[plugins]]
repo = 'roxma/nvim-yarp'
# if = '''has('nvim')'''

# deoplete on vim requires plugin 2/2
[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
# if = '''has('nvim')'''

# Both
# Goyo 120x30
# In percentage
# Goyo 120x50%
# With offsets
# Goyo 50%+25%x50%-25%
[[plugins]]
repo = 'junegunn/goyo.vim'

# [[plugins]]
# repo = 'severin-lemaignan/vim-minimap'
# hook_add = '''
#   let g:minimap_highlight='Visual'
# '''

[[plugins]]
repo  = 'prettier/vim-prettier'
build = 'npm install'

[[plugins]]
repo = 'lambdalisue/vim-pyenv'

[[plugins]]
repo = 'junegunn/rainbow_parentheses.vim'
hook_add = '''
  let g:rainbow#max_level = 16
  let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]

  " List of colors that you do not want. ANSI code or #RRGGBB
  " let g:rainbow#blacklist = [233, 234]

  autocmd VimEnter,Colorscheme * RainbowParentheses
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
  let g:netrw_nogx = 1 " disable netrw's gx mapping.
  nmap gx <Plug>(openbrowser-smart-search)
  vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = '0'

# Files, History, GFiles, Colors
[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']
hook_add = '''
  fun! FzfOmniFiles()
    let is_git = system('git status')
    if v:shell_error
      :Files
    else
      :GFiles
    endif
  endfun
  nnoremap <C-p> :call FzfOmniFiles()<CR>

  " <C-g>で文字列検索を開く
  " <S-?>でプレビューを表示/非表示する
  command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \ 'rg --column --line-number --hidden --ignore-case --no-heading --color=always '.shellescape(<q-args>), 1,
  \ <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 3..'}, 'up:60%')
  \ : fzf#vim#with_preview({'options': '--exact --delimiter : --nth 3..'}, 'right:50%:hidden', '?'),
  \ <bang>0)
  nnoremap <C-g> :Rg<CR>

  " frでカーソル位置の単語をファイル検索する
  nnoremap fr vawy:Rg <C-R>"<CR>
  " frで選択した単語をファイル検索する
  xnoremap fr y:Rg <C-R>"<CR>

  " fbでバッファ検索を開く
  nnoremap fb :Buffers<CR>
  " fpでバッファの中で1つ前に開いたファイルを開く
  nnoremap fp :Buffers<CR><CR>
  " flで開いているファイルの文字列検索を開く
  nnoremap fl :BLines<CR>
  " fmでマーク検索を開く
  nnoremap fm :Marks<CR>
  " fhでファイル閲覧履歴検索を開く
  nnoremap fh :History<CR>
  " fcでコミット履歴検索を開く
  nnoremap fc :Commits<CR>
'''

# lsp
[[plugins]]
repo = 'prabirshrestha/async.vim'
[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
let g:lsp_signs_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
merged = '0'
hook_add = '''
" remove ts-server
let g:lsp_settings_filetype_javascript = ['eslint-language-server']
let g:lsp_settings_filetype_javascriptreact = ['eslint-language-server']
'''

[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
  " disabled
  let g:polyglot_disabled = ['svelte']

  " vue
  let g:vue_disable_pre_processors=1
  let g:vue_pre_processors='detect_on_enter'
  autocmd FileType *.vuejs set filetype=vue
  autocmd FileType vue syntax sync fromstart
  autocmd BufRead,BufNewFile *.vue setlocal filetype=vue

  " pcss
  autocmd BufRead,BufNewFile *.pcss setlocal filetype=scss

  " scss
  autocmd FileType scss set iskeyword+=-

  " glsl
  autocmd! BufNewFile,BufRead *.vs,*.fs set ft=glsl

  " javascript
  let g:javascript_plugin_jsdoc=1

  " markdown
  let g:vim_markdown_folding_disabled=1
  let g:vim_markdown_conceal = 0
  let g:vim_markdown_conceal_code_blocks = 0

  " python
  let g:python_highlight_all=1

  " php
  " 文字列中のSQLをハイライトする
  let php_sql_query=1
  " Baselibメソッドのハイライト
  let php_baselib=1
  " <? をハイライト除外する
  let php_htmlInStrings=1
  " ショートタグ (<?を無効にする→ハイライト除外にする)
  let php_noShortTags=1
  " 折りたたみ
  " zo: 開く (カーソルが折りたたまれた行の上にあるとき)
  " zc: 閉じる (折りたたまれる範囲中で)
  " zR: ぜんぶ開く
  " zM: ぜんぶ閉じる
  " zj: 次に移動
  " zk: 前に移動
  let php_folding=0
  " カッコが閉じていない場合にハイライト
  let php_parent_error_close=1
'''

[[plugins]]
repo = 'itchyny/vim-parenmatch'
hook_add = '''
  let g:loaded_matchparen=1
'''

[[plugins]]
repo = 'mhinz/vim-startify'
hook_add = '''
  let g:ascii = []
  let g:startify_custom_header = g:ascii + [
    \   '   Vim ver.' . v:version,
    \   '   ' . strftime("%Y/%m/%d %H:%M:%S"),
    \ ]
  let g:startify_files_number = 8
  let g:startify_custom_indices = ['f', 'g', 'h', 'r', 'i', 'o', 'b']
  let g:startify_list_order = [
    \ ['   MRU'],
    \ 'files',
    \ ['   MRU ' . getcwd()],
    \ 'dir',
    \ ['   Sessions'],
    \ 'sessions',
    \ ['   Bookmarks'],
    \ 'bookmarks',
    \ ]
  let g:startify_bookmarks = [$MYVIMRC]
'''

[[plugins]]
repo = 'itchyny/vim-cursorword'

[[plugins]]
repo = 'thinca/vim-qfreplace'

# Ack hoge
# replacfe = Ack hoge -> Qfreplace -> [replace] -> w
[[plugins]]
repo = 'mileszs/ack.vim'
hook_add = '''
  if executable('rg')
    let g:ackprg = 'rg --vimgrep --no-heading'
  elseif executable('ag')
    let g:ackprg = 'ag --nogroup --nocolor --column'
  endif
'''

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  let g:winresizer_gui_enable=1
  let g:winresizer_vert_resize=1
  let g:winresizer_horiz_resize=1
  let g:winresizer_start_key='<C-T>'
  let g:winresizer_gui_start_key='<C-T>'
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  " let g:gitgutter_highlight_lines=1
  let g:gitgutter_max_signs=9999
  set updatetime=100
  " highlight clear SignColumn
  autocmd ColorScheme * hi GitGutterAdd guifg=#009900
  autocmd ColorScheme * hi GitGutterChange guifg=#bbbb00
  autocmd ColorScheme * hi GitGutterDelete guifg=#ff2222
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add = '''
  " let g:over#command_line#enable_import_commandline_map=0

  " 全体置換
  nnoremap <silent> <Space>o :OverCommandLine<CR>%s//g<Left><Left>
  " 選択範囲置換
  vnoremap <silent> <Space>o :OverCommandLine<CR>s//g<Left><Left>
  " カーソル下の単語置換
  nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
'''

[[plugins]]
repo = 'terryma/vim-multiple-cursors'
hook_add = '''
  " https://github.com/Shougo/deoplete.nvim/issues/265
  " Called once right before you start selecting multiple cursors
  function Multiple_cursors_before()
    let g:deoplete#disable_auto_complete = 1
  endfunction
  " Called once only when the multiple selection is canceled (default <Esc>)
  function Multiple_cursors_after()
    let g:deoplete#disable_auto_complete = 0
  endfunction
  " function! Multiple_cursors_before()
  "   let g:ycm_auto_trigger = 0
  "   if exists(':NeoCompleteLock') == 2
  "     exe 'NeoCompleteLock'
  "   endif
  " endfunction
  " function! Multiple_cursors_after()
  "   let g:ycm_auto_trigger = 1
  "   if exists(':NeoCompleteUnlock') == 2
  "     exe 'NeoCompleteUnlock'
  "   endif
  " endfunction
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'justincampbell/vim-eighties'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config = {'*': {'hook/time/enable': '1'}}
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if has('win32')
    let cmd = 'tools\\update-dll-mingw'
  elseif has('win32unix') " for Cygwin
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# カーソル移動
[[plugins]]
repo = 'Lokaltog/vim-easymotion'
hook_add = '''
  " デフォルトのキーマッピングを無効に
  let g:EasyMotion_do_mapping=0
  " f + 2文字 で画面全体を検索してジャンプ
  nmap f <plug>(easymotion-overwin-f2)
  " 検索時、大文字小文字を区別しない
  let g:EasyMotion_smartcase=1
'''

# カーソル位置のコンテキストに合わせてftを切り替える
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

# カーソル位置のコンテキストのftを判定するライブラリ
[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  " vim立ち上げたときに、自動的にvim-indent-guidesをオンにする
  let g:indent_guides_enable_on_vim_startup=1
  " ガイドをスタートするインデントの量
  let g:indent_guides_start_level=2
  " 自動カラーを無効にする
  let g:indent_guides_auto_colors=0
  " ハイライト色の変化の幅
  let g:indent_guides_color_change_percent=30
  " ガイドの幅
  let g:indent_guides_guide_size=1
  " 例外ファイルタイプ
  let g:indent_guides_exclude_filetypes = ['help', 'nerdtree', 'tagbar', 'unite', 'startify', 'neo-tree']
  " 奇数インデントのカラー
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd guibg='#555544' ctermbg=153
  " 偶数インデントのカラー
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg='#445555' ctermbg=221
'''

[[plugins]]
repo = 'ervandew/supertab'
hook_add = '''
  let g:SuperTabDefaultCompletionType="<c-n>"
'''

# comment out/in
[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
  vmap gcc <Plug>(caw:zeropos:toggle)
'''

# ,で区切ったあとに:MakeTable!
[[plugins]]
repo = 'mattn/vim-maketable'

# help日本語化
[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
  set helplang=ja
'''

# 置換可視化
[[plugins]]
repo = 'markonm/traces.vim'

# 文字選択後:Translate
[[plugins]]
repo = 'skanehira/translate.vim'

#---------
# @vim !has('nvim')
#---
[[plugins]]
repo = 'preservim/nerdtree'
# if = '''!has('nvim')'''
# depends = ['vim-devicons', 'nerdtree-git-plugin']
hook_add = '''
  " 隠しファイルをデフォルトで表示させる
  let g:NERDTreeShowHidden=1
  " ブックマークや、ヘルプのショートカットをメニューに表示しない
  let g:NERDTreeMinimalUI=1
  " treeの見た目
  " let g:NERDTreeDirArrowExpandable='+'
  " let g:NERDTreeDirArrowCollapsible='-'
  " 表示する位置
  let g:NERDTreeWinPos='left'

  let g:NERDTreeAutoDeleteBuffer=1

  " https://github.com/preservim/nerdtree/issues/1321
  let g:NERDTreeMinimalMenu=1

  " keymap
  nnoremap :tree :NERDTreeToggle
  nnoremap <silent><C-e> :NERDTreeToggle<CR>

  " 他のバッファをすべて閉じた時にNERDTreeが開いていたらNERDTreeも一緒に閉じる
  autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
  " デフォルトでツリーを表示させる
  " autocmd VimEnter,Colorscheme * NERDTree
  " ファイル指定があればNERDTreeを開く、指定がない場合は表示させない
  autocmd VimEnter,Colorscheme * if argc() != 0 | exe 'NERDTree' | endif
  " カーソルをメインウインドウに移動
  autocmd VimEnter,Colorscheme * if argc() != 0 | wincmd p | endif
'''

[[plugins]]
repo = 'MarSoft/nerdtree-grep-plugin'
# if = '''!has('nvim')'''
depends = ['preservim/nerdtree']

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
# if = '''!has('nvim')'''
hook_add = '''
  " let g:NERDTreeGitStatusIndicatorMapCustom={
  "   \ "Modified"  : "*",
  "   \ "Staged"    : "+",
  "   \ "Untracked" : "_",
  "   \ "Renamed"   : ">",
  "   \ "Unmerged"  : "=",
  "   \ "Deleted"   : "x",
  "   \ "Dirty"     : "X",
  "   \ "Clean"     : "-",
  "   \ 'Ignored'   : ' ',
  "   \ "Unknown"   : "?"
  "   \ }
  let g:NERDTreeGitStatusIndicatorMapCustom={
    \ 'Modified'  :'✹',
    \ 'Staged'    :'✚',
    \ 'Untracked' :'✭',
    \ 'Renamed'   :'➜',
    \ 'Unmerged'  :'═',
    \ 'Deleted'   :'✖',
    \ 'Dirty'     :'✗',
    \ 'Ignored'   :'☒',
    \ 'Clean'     :'✔︎',
    \ 'Unknown'   :'?',
    \ }
  let g:NERDTreeGitStatusUseNerdFonts = 1
  " autocmd VimEnter,Colorscheme * highlight link NERDTreeGitStatusIgnored Comment  "custom color
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
# if = '''!has('nvim')'''
hook_add = '''
  " set encoding=UTF-8
  let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
  let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['vue'] = ''
  let g:NERDTreeExtensionHighlightColor = {}
  let g:NERDTreeExtensionHighlightColor['vue'] = '42B983'

  let g:WebDevIconsUnicodeDecorateFolderNodes=1
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
if = '''!has('nvim')'''
hook_add = '''
  " mapping
  nmap n <Plug>(anzu-n-with-echo)
  nmap N <Plug>(anzu-N-with-echo)
  nmap * <Plug>(anzu-star-with-echo)
  nmap # <Plug>(anzu-sharp-with-echo)
  " clear status
  nmap <Esc><Esc> <Plug>(anzu-clear-search-status)
  " statusline
  set statusline=%{anzu#search_status()}
'''

[[plugins]]
repo = 'Shougo/vimshell.vim'
if = '''!has('nvim')'''
hook_add = '''
  " vimshell setting
  if has('osxdarwin')
    let g:vimshell_editor_command = '/Applications/MacVim.app/Contents/MacOS/Vim --servername=VIM --remote-tab-wait-silent'
  endif

  let g:vimshell_interactive_update_time = 10
  " let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'

  let g:vimshell_popup_height = 20

  let g:vimshell_prompt_expr =
    \ 'escape(fnamemodify(getcwd(), ":~").">", "\\[]()?! ")." "'
  let g:vimshell_prompt_pattern = '^\%(\f\|\\.\)\+> '
  " let g:vimshell_right_prompt = 'vcs#info("(%s)-[%b]", "(%s)-[%b|%a]")'

  if has('win32') || has('win64')
    " Display user name on Windows.
    " let g:vimshell_prompt = $USERNAME."% "
  else
    " Display user name on Linux.
    " let g:vimshell_prompt = $USER."% "
    call vimshell#set_execute_file('bmp,jpg,png,gif', 'gexe eog')
    call vimshell#set_execute_file('mp3,m4a,ogg', 'gexe amarok')
    let g:vimshell_execute_file_list['zip'] = 'zipinfo'
    call vimshell#set_execute_file('tgz,gz', 'gzcat')
    call vimshell#set_execute_file('tbz,bz2', 'bzcat')
  endif

  " Initialize execute file list.
  let g:vimshell_execute_file_list = {}
  call vimshell#set_execute_file('txt,vim,c,h,cpp,d,xml,java', 'vim')
  let g:vimshell_execute_file_list['rb'] = 'ruby'
  let g:vimshell_execute_file_list['pl'] = 'perl'
  let g:vimshell_execute_file_list['py'] = 'python'
  call vimshell#set_execute_file('html,xhtml', 'gexe firefox')

  autocmd FileType vimshell
  \ call vimshell#altercmd#define('g', 'git')
  \| call vimshell#altercmd#define('i', 'iexe')
  \| call vimshell#altercmd#define('l', 'll')
  \| call vimshell#altercmd#define('ll', 'ls -l')
  \| call vimshell#hook#add('chpwd', 'my_chpwd', 'MyChpwd')

  function! MyChpwd(args, context)
    call vimshell#execute('ls')
  endfunction

  autocmd FileType int-* call s:interactive_settings()
  function! s:interactive_settings()
  endfunction

  let $PATH = $HOME.'/.nodebrew/current/bin:'.$PATH
  let $PATH = $HOME.'/.anyenv/envs/nodenv/bin:'.$PATH
  let $PATH = '/usr/local/opt/openssl/bin:'.$PATH

  let $PATH = '/usr/local/sbin:'.$PATH
  let $PATH = '/usr/sbin:'.$PATH
  let $PATH = '/sbin:'.$PATH

  let $PATH = '/usr/local/bin:'.$PATH
  let $PATH = '/usr/bin:'.$PATH
  let $PATH = '/bin:'.$PATH

  " vimshell map
  nnoremap <silent> vs :VimShell<CR>
  nnoremap <silent> vsc :VimShellCreate<CR>
  nnoremap <silent> vsp :VimShellPop %:p:h<CR>
  nnoremap <silent> vsi :VimShellInteractive<CR>
'''
# colorscheme
[[plugins]]
# repo = 'Pychimp/vim-luna'
# repo = 'sainnhe/edge'
# repo = 'jonathanfilip/vim-lucius'
# repo = 'zeis/vim-kolor'
# repo = 'KeitaNakamura/neodark.vim'
# repo = 'arcticicestudio/nord-vim'
# repo = 'dracula/vim'
repo = 'cocopon/iceberg.vim'
if = '''!has('nvim')'''
hook_add = '''
  set background=dark
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  " autocmd MyAutoCmd VimEnter * nested colorscheme luna
  " autocmd MyAutoCmd VimEnter * nested colorscheme edge
  " autocmd MyAutoCmd VimEnter * nested colorscheme lucius
  " autocmd MyAutoCmd VimEnter * nested colorscheme dracula
  " autocmd MyAutoCmd VimEnter * nested colorscheme kolor
  " autocmd MyAutoCmd VimEnter * nested colorscheme neodark
  " autocmd MyAutoCmd VimEnter * nested colorscheme nord
  " autocmd MyAutoCmd VimEnter * nested colorscheme iceberg
  autocmd MyAutoCmd VimEnter * nested colorscheme iceberg

  " highlight 初期化
  autocmd VimEnter,Colorscheme * hi Normal guibg=NONE ctermbg=NONE
  autocmd VimEnter,Colorscheme * hi Normal ctermbg=NONE guibg=NONE
  autocmd VimEnter,Colorscheme * hi! NonText ctermbg=NONE guibg=NONE guifg=NONE ctermfg=NONE
'''

# statusline custom
[[plugins]]
repo = 'itchyny/lightline.vim'
if = '''!has('nvim')'''
hook_add = '''
  let g:lightline={
  \   'colorscheme': 'iceberg',
  \   'active': {
  \     'left': [['mode', 'paste'], ['gitbranch', 'readonly', 'filename', 'modified'], ['linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok']],
  \     'right': [['lineinfo'], ['percent'], ['fileformat', 'fileencoding', 'filetype']]
  \   },
  \   'inactive': {
  \     'left': [['filename']],
  \     'right': [['lineinfo'], ['percent']]
  \   },
  \   'component_function': {
  \     'gitbranch': 'FugitiveHead'
  \   }
  \ }
'''

# linter, hint
[[plugins]]
repo = 'w0rp/ale'
if = '''!has('nvim')'''
depends = ['lightline.vim']
#  \   'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
#  \   'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
hook_add = '''
  let g:ale_statusline_format=['E%d', 'W%d', '']
  let g:ale_linter_aliases = {
  \   'vue': 'css'
  \ }
  let g:ale_linters = {
  \   'html': ['htmlhint'],
  \   'pug': ['puglint'],
  \   'css': ['stylelint'],
  \   'stylus': ['stylelint'],
  \   'javascript': ['eslint'],
  \   'vue': ['eslint'],
  \   'jsx': ['eslint'],
  \   'tsx': ['eslint'],
  \   'ts': ['eslint'],
  \   'typescript': ['eslint'],
  \   'typescriptreact': ['eslint'],
  \   'svelte': ['eslint']
  \ }
  let g:ale_echo_msg_format = '[%linter%] %s'

  nmap <silent> <C-w>j <Plug>(ale_next_wrap)
  nmap <silent> <C-w>k <Plug>(ale_previous_wrap)
'''

# lightline ale
[[plugins]]
repo = 'maximbaz/lightline-ale'
if = '''!has('nvim')'''
depends = ['lightline.vim']
hook_add = '''
  let g:lightline.component_expand={
  \   'linter_checking': 'lightline#ale#checking',
  \   'linter_warnings': 'lightline#ale#warnings',
  \   'linter_errors': 'lightline#ale#errors',
  \   'linter_ok': 'lightline#ale#ok'
  \ }
  let g:lightline.component_type={
  \   'linter_checking': 'left',
  \   'linter_warnings': 'warning',
  \   'linter_errors': 'error',
  \   'linter_ok': 'left'
  \ }
  " let g:lightline.active.right=[['lineinfo'], ['percent'], ['fileformat', 'fileencoding', 'filetype'], ['linter_errors', 'linter_warnings', 'linter_ok']]
'''

#---------
# @nvim has('nvim')
#---
# colorscheme
[[plugins]]
repo = 'EdenEast/nightfox.nvim'
if = '''has('nvim')'''
hook_add = '''
lua << EOF
  require("nightfox").setup()
  vim.cmd("autocmd MyAutoCmd VimEnter * nested colorscheme nightfox")
EOF
'''

# [[plugins]]
# repo = 'nvim-neo-tree/neo-tree.nvim'
# if = '''has('nvim')'''
# depends = ['nvim-lua/plenary.nvim', 'nvim-tree/nvim-web-devicons', 'MunifTanjim/nui.nvim']
# rev  = 'v2.x'
# hook_add = '''
# lua << EOF
#   vim.cmd([[ let g:neo_tree_remove_legacy_commands = 1 ]])
#
#   vim.fn.sign_define("DiagnosticSignError",
#     {text = " ", texthl = "DiagnosticSignError"})
#   vim.fn.sign_define("DiagnosticSignWarn",
#     {text = " ", texthl = "DiagnosticSignWarn"})
#   vim.fn.sign_define("DiagnosticSignInfo",
#     {text = " ", texthl = "DiagnosticSignInfo"})
#   vim.fn.sign_define("DiagnosticSignHint",
#     {text = " ", texthl = "DiagnosticSignHint"})
#
#   require("neo-tree").setup({
#     close_if_last_window = true,
#     enable_git_status = true,
#     enable_diagnostics = true,
#     popup_border_style = "rounded",
#     sort_case_insensitive = false,
#
#     actions = {
#       open_file = {
#         resize_window = true
#       }
#     },
#     source_selector = {
#       winbar = false,
#       statusline = false
#     },
#     window = {
#       position = "left",
#       width = 30,
#     },
#     filesystem = {
#       filtered_items = {
#         visible = false, -- when true, they will just be displayed differently than normal items
#         hide_dotfiles = false,
#         hide_gitignored = false,
#         hide_hidden = false, -- only works on Windows for hidden files/directories
#       }
#     },
#     default_component_configs = {
#       git_status = {
#         symbols = {
#           -- Change type
#           added     = "✚", -- or "✚", but this is redundant info if you use git_status_colors on the name
#           modified  = "✹", -- or "", but this is redundant info if you use git_status_colors on the name
#           deleted   = "✖",-- this can only be used in the git_status source
#           renamed   = "➜",-- this can only be used in the git_status source
#           -- Status type
#           untracked = "✭",
#           ignored   = "☒",
#           unstaged  = "?",
#           staged    = "",
#           conflict  = "",
#         },
#         align = "right",
#       },
#     },
#   })
#   -- vim.cmd([[nnoremap \ :Neotree reveal<cr>]])
#   vim.cmd([[
#     nnoremap <silent><C-e> :Neotree toggle left<CR>
#     autocmd VimEnter * if argc() != 0 | exe 'Neotree' | endif
#     autocmd VimEnter * if argc() != 0 | wincmd p | endif
#   ]])
# EOF
# '''

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
if = '''has('nvim')'''

# [[plugins]]
# repo = 'nvim-tree/nvim-web-devicons'
# if = '''has('nvim')'''

[[plugins]]
repo = 'MunifTanjim/nui.nvim'
if = '''has('nvim')'''

[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
# depends = ['kyazdani42/nvim-web-devicons']
if = '''has('nvim')'''
hook_add = '''
lua << END
  require('lualine').setup({
    options = {
      ignore_focus = {"neo-tree", "nerdtree"},
    }
  })
END
'''

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'
if = '''has('nvim')'''
hook_add = '''
lua << END
  require('nvim-web-devicons').setup()
  vim.cmd([[
    let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
    let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['vue'] = ''
    let g:NERDTreeExtensionHighlightColor = {}
    let g:NERDTreeExtensionHighlightColor['vue'] = '42B983'

    let g:WebDevIconsUnicodeDecorateFolderNodes=1"
  ]])
END
'''
