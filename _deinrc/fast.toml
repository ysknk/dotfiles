[[plugins]]
repo = 'Shougo/dein.vim'

# [[plugins]]
# repo = 'lambdalisue/vim-pyenv'

[[plugins]]
repo = 'itchyny/vim-parenmatch'
hook_add = '''
  let g:loaded_matchparen = 1
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  " 隠しファイルをデフォルトで表示させる
  let g:NERDTreeShowHidden=1
  " ブックマークや、ヘルプのショートカットをメニューに表示しない
  let g:NERDTreeMinimalUI=1
  " treeの見た目
  let g:NERDTreeDirArrowExpandable='+'
  let g:NERDTreeDirArrowCollapsible='-'
  " 表示する位置
  let g:NERDTreeWinPos='left'

  " keymap
  nnoremap :tree :NERDTreeToggle
  nnoremap <silent><C-e> :NERDTreeToggle<CR>

  " 初期表示に関わるコマンド
  autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
  " デフォルトでツリーを表示させる
  " autocmd VimEnter,Colorscheme * NERDTree
  " ファイル指定がない場合は表示させずにctrlpを優先させる
  autocmd VimEnter,Colorscheme * if argc() != 0 | NERDTree | endif
  " カーソルをメインウインドウに移動
  autocmd VimEnter,Colorscheme * if argc() != 0 | wincmd p | endif
'''

[[plugins]]
repo = 'MarSoft/nerdtree-grep-plugin'
depends = ['scrooloose/nerdtree']

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = ['scrooloose/nerdtree']
hook_add = '''
  let g:NERDTreeIndicatorMapCustom={
   \ "Modified"  : "*",
   \ "Staged"    : "+",
   \ "Untracked" : "_",
   \ "Renamed"   : ">",
   \ "Unmerged"  : "=",
   \ "Deleted"   : "x",
   \ "Dirty"     : "X",
   \ "Clean"     : "-",
   \ 'Ignored'   : ' ',
   \ "Unknown"   : "?"
   \ }
'''

[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
hook_add = '''
  let s:brown="905532"
  let s:aqua= "3AFFDB"
  let s:blue="689FB6"
  let s:darkBlue="44788E"
  let s:purple="834F79"
  let s:lightPurple="834F79"
  let s:red="AE403F"
  let s:beige="F5C06F"
  let s:yellow="F09F17"
  let s:orange="D4843E"
  let s:darkOrange="F16529"
  let s:pink="CB6F6F"
  let s:salmon="EE6E73"
  let s:green="8FAA54"
  let s:lightGreen="31B53E"
  let s:white="FFFFFF"

  let g:NERDTreeLimitedSyntax=1

  let g:NERDTreeFileExtensionHighlightFullName=1
  let g:NERDTreeExactMatchHighlightFullName=1
  let g:NERDTreePatternMatchHighlightFullName=1

  let g:NERDTreeHighlightCursorline=0

  let g:NERDTreeExtensionHighlightColor = {}
  let g:NERDTreePatternMatchHighlightColor = {}
  let g:NERDTreeExactMatchHighlightColor = {}

  let g:NERDTreeExtensionHighlightColor['pug']=s:darkOrange
  let g:NERDTreeExtensionHighlightColor['jade']=s:darkOrange

  let g:NERDTreeExtensionHighlightColor['vue']=s:beige
  let g:NERDTreeExtensionHighlightColor['jsx']=s:beige
  let g:NERDTreeExtensionHighlightColor['ts']=s:beige
  let g:NERDTreeExtensionHighlightColor['tsx']=s:beige

let g:NERDTreeExtensionHighlightColor['svg']=s:aqua

  let g:NERDTreeSyntaxEnabledExtensions=[
    \ 'styl',
    \ 'yml',
    \ 'gif',
    \ 'psd', 'psb', 'ai'
  \ ]
'''

# [[plugins]]
# repo = 'ryanoasis/vim-devicons'
# hook_add = '''
#   set encoding=UTF-8
#   let g:WebDevIconsUnicodeDecorateFolderNodes=1
# '''

[[plugins]]
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'mileszs/ack.vim'

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
  " # ctrlpバッファに入る時と出るときに使用する関数を定義
  " # lightline.vimで表示しているステータスラインとの衝突を避けるため
  let g:ctrlp_buffer_func={
    \ 'enter': 'CtrlPEnter',
    \ 'exit': 'CtrlPLeave',
  \ }

  " # ctrlpに入るとき，ステータスラインの表示をoffに
  function! CtrlPEnter()
    set laststatus=0
  endfunction

  " # ctrlpから出るとき，ステータスラインの表示をonに
  function! CtrlPLeave()
    set laststatus=2
  endfunction

  " # ファイルを指定せずにvimを立ち上げた時に，自動的にctrlpを起動する
  function CtrlPIfEmpty()
    if @% == ""
      CtrlP ~/
    endif
  endfunction

  augroup AutoCtrlP
    autocmd!
    autocmd VimEnter * call CtrlPIfEmpty()
  augroup END

  " # ctrlpのキーマッピングを <C-p>から<Leader>eに変更
  " # yankround.vimで<C-p>を使用しているため，衝突回避
  " let g:ctrlp_map='<nop>'
  " nnoremap <Leader>e :CtrlP ~/<CR>

  " # 日本語検索をoff
  " let g:ctrlp_use_migemo=0
  " # あいまい検索をoff
  let g:ctrlp_regexp=1
  " # キャッシュを使用して検索を高速化
  let g:ctrlp_use_caching=1
  " # vim終了時にキャッシュをクリアしない
  let g:ctrlp_clear_cache_on_exit=0
  " # <C-r>でキャッシュをクリアして再検索
  let g:ctrlp_prompt_mappings={'PrtClearCache()': ['<C-r>']}
  " # 検索の際に200[ms]のウェイトを入れる
  let g:ctrlp_lazy_update=200
  " # 検索結果の表示ウィンドウの設定、10件分を表示、それ以上はスクロール
  let g:ctrlp_match_window='bottom,order:btt,min:1,max:20,results:50'
  " # 隠しファイルを表示しない
  " let g:ctrlp_show_hidden=0
  " # 検索してほしくないファイルやディレクトリを除外
  let g:ctrlp_custom_ignore={
    \ 'dir':  '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(exe|so|dll|o)$',
    \ 'link': 'some_bad_symbolic_links',
  \ }
'''

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  let g:winresizer_gui_enable=1
  let g:winresizer_vert_resize=1
  let g:winresizer_horiz_resize=1
  let g:winresizer_start_key='<C-T>'
  let g:winresizer_gui_start_key='<C-T>'
'''

# [[plugins]]
# repo = 'mhinz/vim-startify'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  " let g:gitgutter_highlight_lines=1
  let g:gitgutter_max_signs=9999
  set updatetime=100
  " highlight clear SignColumn
  autocmd ColorScheme * hi GitGutterAdd guifg=#009900
  autocmd ColorScheme * hi GitGutterChange guifg=#bbbb00
  autocmd ColorScheme * hi GitGutterDelete guifg=#ff2222
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add = '''
  " 全体置換
  nnoremap <silent> <Space>o :OverCommandLine<CR>%s//g<Left><Left>
  " 選択範囲置換
  vnoremap <silent> <Space>o :OverCommandLine<CR>s//g<Left><Left>
  " カーソル下の単語置換
  nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
'''

[[plugins]]
repo = 'terryma/vim-multiple-cursors'
hook_add = '''
  " Called once right before you start selecting multiple cursors
  function! Multiple_cursors_before()
    let g:ycm_auto_trigger = 0
    if exists(':NeoCompleteLock') == 2
      exe 'NeoCompleteLock'
    endif
  endfunction

  " Called once only when the multiple selection is canceled (default <Esc>)
  function! Multiple_cursors_after()
    let g:ycm_auto_trigger = 1
    if exists(':NeoCompleteUnlock') == 2
      exe 'NeoCompleteUnlock'
    endif
  endfunction
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  " mapping
  nmap n <Plug>(anzu-n-with-echo)
  nmap N <Plug>(anzu-N-with-echo)
  nmap * <Plug>(anzu-star-with-echo)
  nmap # <Plug>(anzu-sharp-with-echo)
  " clear status
  nmap <Esc><Esc> <Plug>(anzu-clear-search-status)
  " statusline
  set statusline=%{anzu#search_status()}
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'justincampbell/vim-eighties'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config = {'*': {'hook/time/enable': '1'}}
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if has('win32')
    let cmd = 'tools\\update-dll-mingw'
  elseif has('win32unix') " for Cygwin
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'Shougo/vimshell.vim'
hook_add = '''
" vimshell setting
let g:vimshell_interactive_update_time = 10
" let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'

let g:vimshell_popup_height = 20

let g:vimshell_prompt_expr =
  \ 'escape(fnamemodify(getcwd(), ":~").">", "\\[]()?! ")." "'
let g:vimshell_prompt_pattern = '^\%(\f\|\\.\)\+> '
" let g:vimshell_right_prompt = 'vcs#info("(%s)-[%b]", "(%s)-[%b|%a]")'

" if has('win32') || has('win64')
"   " Display user name on Windows.
"   let g:vimshell_prompt = $USERNAME."% "
" else
"   " Display user name on Linux.
"   let g:vimshell_prompt = $USER."% "
" endif

" Initialize execute file list.
let g:vimshell_execute_file_list = {}
call vimshell#set_execute_file('txt,vim,c,h,cpp,d,xml,java', 'vim')
let g:vimshell_execute_file_list['rb'] = 'ruby'
let g:vimshell_execute_file_list['pl'] = 'perl'
let g:vimshell_execute_file_list['py'] = 'python'
call vimshell#set_execute_file('html,xhtml', 'gexe firefox')

autocmd FileType vimshell
\ call vimshell#altercmd#define('g', 'git')
\| call vimshell#altercmd#define('i', 'iexe')
\| call vimshell#altercmd#define('l', 'll')
\| call vimshell#altercmd#define('ll', 'ls -l')
\| call vimshell#hook#add('chpwd', 'my_chpwd', 'MyChpwd')

function! MyChpwd(args, context)
  call vimshell#execute('ls')
endfunction

autocmd FileType int-* call s:interactive_settings()
function! s:interactive_settings()
endfunction

let $PATH = $HOME.'/.nodebrew/current/bin:'.$PATH
let $PATH = '/usr/local/opt/openssl/bin:'.$PATH

let $PATH = '/usr/local/sbin:'.$PATH
let $PATH = '/usr/sbin:'.$PATH
let $PATH = '/sbin:'.$PATH

let $PATH = '/usr/local/bin:'.$PATH
let $PATH = '/usr/bin:'.$PATH
let $PATH = '/bin:'.$PATH

" vimshell map
nnoremap <silent> vs :VimShell<CR>
nnoremap <silent> vsc :VimShellCreate<CR>
nnoremap <silent> vsp :VimShellPop %:p:h<CR>
nnoremap <silent> vsi :VimShellInteractive<CR>
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# カーソル移動
[[plugins]]
repo = 'Lokaltog/vim-easymotion'
hook_add = '''
  " デフォルトのキーマッピングを無効に
  let g:EasyMotion_do_mapping=0
  " f + 2文字 で画面全体を検索してジャンプ
  nmap f <plug>(easymotion-overwin-f2)
  " 検索時、大文字小文字を区別しない
  let g:EasyMotion_smartcase=1
'''

# カーソル位置のコンテキストに合わせてftを切り替える
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

# カーソル位置のコンテキストのftを判定するライブラリ
[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  " vim立ち上げたときに、自動的にvim-indent-guidesをオンにする
  let g:indent_guides_enable_on_vim_startup=1
  " ガイドをスタートするインデントの量
  let g:indent_guides_start_level=2
  " 自動カラーを無効にする
  let g:indent_guides_auto_colors=0
  " ハイライト色の変化の幅
  let g:indent_guides_color_change_percent=30
  " ガイドの幅
  let g:indent_guides_guide_size=1
  " 奇数インデントのカラー
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd guibg=#223344 ctermbg=153
  " 偶数インデントのカラー
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#443322 ctermbg=221
'''

[[plugins]]
repo = 'ervandew/supertab'
hook_add = '''
  let g:SuperTabDefaultCompletionType="<c-n>"
'''

# comment out/in
[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
  vmap gcc <Plug>(caw:zeropos:toggle)
'''

# colorscheme
[[plugins]]
# repo = 'Pychimp/vim-luna'
repo = 'sainnhe/edge'
hook_add = '''
  set background=dark
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  " autocmd MyAutoCmd VimEnter * nested colorscheme luna
  autocmd MyAutoCmd VimEnter * nested colorscheme edge
'''

# statusline custom
[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['sainnhe/edge']
hook_add = '''
  let g:lightline={
  \   'colorscheme': 'edge',
  \   'active': {
  \     'left': [['mode', 'paste'], ['gitbranch', 'readonly', 'filename', 'modified']],
  \     'right': [['lineinfo'], ['percent'], ['fileformat', 'fileencoding', 'filetype']]
  \   },
  \   'inactive': {
  \     'left': [['filename']],
  \     'right': [['lineinfo'], ['percent']]
  \   },
  \   'component_function': {
  \     'gitbranch': 'fugitive#head'
  \   }
  \ }
'''

# linter, hint
[[plugins]]
repo = 'w0rp/ale'
depends = ['lightline.vim']
hook_add = '''
  let g:ale_statusline_format=['E%d', 'W%d', '']
  let g:ale_linter_aliases = {
  \   'vue': 'css'
  \ }
  let g:ale_linters = {
  \   'html': ['htmlhint'],
  \   'pug': ['puglint'],
  \   'css': ['stylelint'],
  \   'stylus': ['stylelint'],
  \   'javascript': ['eslint'],
  \   'vue': ['eslint'],
  \   'jsx': ['eslint']
  \ }
  nmap <silent> <C-w>j <Plug>(ale_next_wrap)
  nmap <silent> <C-w>k <Plug>(ale_previous_wrap)
'''

# lightline ale
[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['lightline.vim']
hook_add = '''
  let g:lightline.component_expand={
  \   'linter_warnings': 'lightline#ale#warnings',
  \   'linter_errors': 'lightline#ale#errors',
  \   'linter_ok': 'lightline#ale#ok'
  \ }
  let g:lightline.component_type={
  \   'linter_warnings': 'warning',
  \   'linter_errors': 'error',
  \   'linter_ok': 'left'
  \ }
  let g:lightline.active.right=[['lineinfo'], ['percent'], ['fileformat', 'fileencoding', 'filetype'], ['linter_errors', 'linter_warnings', 'linter_ok']]
'''

